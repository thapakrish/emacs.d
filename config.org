
#+TITLE: Emacs configuration

* PATH
#+BEGIN_SRC emacs-lisp
;; to make python run anaconda-python and not the default one
(defun set-exec-path-from-shell-PATH ()
        (interactive)
        (let ((path-from-shell (replace-regexp-in-string "^.*\n.*shell\n" "" (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
        (setenv "PATH" path-from-shell)
        (setq exec-path (split-string path-from-shell path-separator))))
(set-exec-path-from-shell-PATH)
#+END_SRC

* Packages

#+BEGIN_SRC emacs-lisp
(require 'package)

;;melpa to get autoconflict on list-package
(setq package-archives '(("ELPA" . "http://tromey.com/elpa/")
			 ("gnu" . "http://elpa.gnu.org/packages/")
;;			 ("marmalade" . "http://marmalade-repo.org/packages/")
			 ;; melpa has auto-complete mode
			 ("melpa" . "http://melpa.milkbox.net/packages/")))

;; Stable stable version from MELPA
(add-to-list 'package-archives
             '("melpa-stable" . "http://stable.melpa.org/packages/") t)
#+END_SRC

* Python

Indent 4 spaces.

#+BEGIN_SRC emacs-lisp
  (setq python-indent 4)
#+END_SRC
** Elpy setup
#+BEGIN_SRC emacs-lisp
(package-initialize)
(elpy-enable)
(setq elpy-rpc-backend "jedi")

(setenv "WORKON_HOME" "/Users/Krishna/anaconda/envs")
(pyvenv-mode 1)

(add-hook 'python-mode-hook
      (lambda ()
             (auto-complete-mode 1)
             (set (make-local-variable 'ac-sources)
                  (append ac-sources '(ac-source-yasnippet)))
             (set (make-local-variable 'ac-find-function) 'ac-python-find)
             (set (make-local-variable 'ac-candidate-function) 'ac-python-candidate)
             (set (make-local-variable 'ac-auto-start) nil)))
#+END_SRC
* Org Mode
** Barebones
#+BEGIN_SRC emacs-lisp
  (require 'org)
  ;; highlight source blocks while edit
  (setq org-src-fontify-natively t)


  ;; tab
  (setq org-src-tab-acts-natively t)

  (setq org-src-window-setup 'current-window)


  ;; spell check
  (add-hook 'org-mode-hook 'flyspell-mode)


  ;; pretty bullets
  (add-hook 'org-mode-hook
            (lambda ()
              (org-bullets-mode t)))

  (setq org-ellipsis "â¤µ")

  (setenv "BROWSER" "firefox")

  ;; For babel support
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (sh . t)
     (python . t)
     (R . t)
     (gnuplot . t)
     (ruby . t)
     (ditaa . t)
     (octave . t)
     (sqlite . t)
     (perl . t)
     ))
#+END_SRC

** Capture, Agenda
#+BEGIN_SRC emacs-lisp
;; Some keys
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(setq org-log-done 'time)
(global-font-lock-mode 1)

;; set org keywords
(setq org-todo-keywords
      '((sequence  "TODO(t)" "Active(a)" "NEXT(n)"
		  "Hold(h)"  "WAITING(w)" "Someday(s)" "Canceled(c)"
		  "DONE(d!)")))


(setf org-todo-keyword-faces
      '(("NEXT" . (:foreground "yellow" :background "red" :weight bold))
	("Active" . (:foreground "yellow" :background "red" :weight bold))
	("TODO" . (:foreground "green" :background "black" :weight bold))
	("Canceled" . (:foreground "cyan" :background "steelblue" :weight bold))
	("Hold" . (:foreground "cyan" :background "blue" :weight bold))
	("WAITING" . (:foreground "yellow" :background "magenta2" :weight bold))
	("Someday" . (:foreground "yellow" :background "blue" :weight bold))
	("DONE" . (:foreground "yellow" :background "red"))))


;; org agenda files
(setq org-agenda-files (list "~/org/work.org"
			     "~/org/emacs.org"
			     "~/org/links.org"
			     "~/org/notes.org"
			     "~/org/misc.org"
			     "~/org/personal.org"))


;; to include diary to agenda
(setq org-agenda-include-diary t)

;; org-todo-state-map
'(org-agenda-ndays 7)

;;show repetitive agenda entries only once
(setq org-agenda-repeating-timestamp-show-all nil)


;; org notes file
(setq org-default-notes-file (concat org-directory "/notes.org"))

;; set capture templates

;;(setq org-directory "~/git/org")
;;(setq org-default-notes-file "~/git/org/refile.org")

;; I use C-c c to start capture mode
(global-set-key (kbd "C-c c") 'org-capture)

;; source : http://doc.norang.ca/org-mode.html#Capture
;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
(setq org-capture-templates
      (quote (
;;	      ("t" "todo" entry (file+headline "~/org/refile.org" "TODO_Items")
;;	       "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
	      ("t" "Todo" entry (file+headline "~/org/refile.org" "Tasks")
	       "* TODO %?\n  %i\n  %a")
	      ("n" "note" entry (file "~/org/notes.org")
	       "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
	      ("j" "Journal" entry (file+datetree "~/org/notes.org")
	       "* %?\n%U\n" :clock-in t :clock-resume t)
;;	      ("n" "Note" entry (file+headline "~/org/current" "Notes")
;;	       "* Note %?\n%T")
	      ("l" "Link" entry (file+headline "~/org/links.org" "Links")
	       "* %? %^L %^g \n%T" :prepend t)
	      ("a" "Appointment" entry (file  "~/org/notes.org" "Appointments")
	       "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")
	      ("c" "CodeBlocks" entry (file+headline "~/org/refile.org" "CodeBlocks")
	       "* %?\n%i\n"))))


;; where to refile
(setq org-refile-targets (quote ((nil :maxlevel . 9)
				 (org-agenda-files :maxlevel . 9))))

;; clock
(setq org-clock-into-drawer t)
#+END_SRC

** LateX
#+BEGIN_SRC emacs-lisp
;; Latex
;; emacs app needs pdflatex env for mac
(getenv "PATH")
(setenv "PATH"
  (concat
   "/Library/TeX/texbin/" ":"
   (getenv "PATH")
  ))

(require 'ox-latex)
(require 'ox-md)
(require 'ox-beamer)

(add-to-list 'org-latex-classes
             '("beamer"
               "\\documentclass\[presentation\]\{beamer\}"
               ("\\section\{%s\}" . "\\section*\{%s\}")
               ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
               ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))

(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)



(setq TeX-parse-self t)
(setq TeX-PDF-mode t)
(add-hook 'LaTeX-mode-hook
          (lambda ()
            (LaTeX-math-mode)
            (setq TeX-master t)))
#+END_SRC

** Confluence
#+BEGIN_SRC emacs-lisp
  ;; to export org files to confluence
  (load "~/Documents/elisp/ox-confluence.el")
  (require 'ox-confluence)
#+END_SRC

* Misc
#+BEGIN_SRC emacs-lisp
;; which key mode
(require 'which-key)
(which-key-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; https://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files
(setq version-control t     ;; Use version numbers for backups.
      kept-new-versions 10  ;; Number of newest versions to keep.
      kept-old-versions 0   ;; Number of oldest versions to keep.
      delete-old-versions t ;; Don't ask to delete excess backup versions.
      backup-by-copying t)  ;; Copy all files, don't rename them.

(setq vc-make-backup-files t)

;; Default and per-save backups go here:
(setq backup-directory-alist '(("" . "~/.emacs.d/backup/per-save")))

(defun force-backup-of-buffer ()
  ;; Make a special "per session" backup at the first save of each
  ;; emacs session.
  (when (not buffer-backed-up)
    ;; Override the default parameters for per-session backups.
    (let ((backup-directory-alist '(("" . "~/.emacs.d/backup/per-session")))
          (kept-new-versions 3))
      (backup-buffer)))
  ;; Make a "per save" backup on each save.  The first save results in
  ;; both a per-session and a per-save backup, to keep the numbering
  ;; of per-save backups consistent.
  (let ((buffer-backed-up nil))
    (backup-buffer)))

(add-hook 'before-save-hook  'force-backup-of-buffer)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-undo-tree-mode)
#+END_SRC

* Shell
#+BEGIN_SRC emacs-lisp
;; For case insensitive tab completion
(setq pcomplete-ignore-case t)

;; Cursor map to up and down arrow
(require 'comint)
(define-key comint-mode-map (kbd "<up>") 'comint-previous-input)
(define-key comint-mode-map (kbd "<down>") 'comint-next-input)

(defun my/tcsh-set-indent-functions ()
  (when (or (string-match ".*\\.alias" (buffer-file-name))
	    (string-match ".*csh$" (file-name-extension (buffer-file-name))))
    (require 'csh-mode) ; https://github.com/Tux/tcsh/blob/master/csh-mode.el
    (setq-local indent-line-function 'csh-indent-line)
    (setq-local indent-region-function 'csh-indent-region)))
(add-hook 'sh-set-shell-hook #'my/tcsh-set-indent-functions)
#+END_SRC
