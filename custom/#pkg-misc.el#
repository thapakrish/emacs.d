(require 'cl)

(global-set-key (kbd "C-c o") 'occur)

;; y/n for yes/no
(fset 'yes-or-no-p 'y-or-n-p)


(add-hook 'c-mode-common-hook
	  (lambda()
	    (local-set-key (kbd "C-c <right>") 'hs-show-block)
	    (local-set-key (kbd "C-c <left>")  'hs-hide-block)
	    (local-set-key (kbd "C-c <up>")    'hs-hide-all)
	    (local-set-key (kbd "C-c <down>")  'hs-show-all)
	    (hs-minor-mode t)))

(defvar key-reminder
  '("C-h f to describe function"
    "M-\ to delete horizontal space"
    "C-x <left> to go to left buffer"
    "C-x z then z to repeat command"
    "M-x occur to find occurrence"
    "C-x c SPC to pop global mark"
    "C-x r l to list bookmarks"
    "C-x r m to create bookmarks"
    "C-h k to define key"
    "C-x C-t to swap lines"
    "C-h r to see emacs manual page"))


(defun kt-gentle-reminder ()
  "Display a random entry from `prelude-tips'."
  (interactive)
  (unless (window-minibuffer-p)
    ;; pick a new random seed
    (random t)
    (message
     (concat "Use me: " (nth (random (length key-reminder)) key-reminder)))))



(defun totd ()
  (interactive)
  (random t) ;; seed with time-of-day
  (with-output-to-temp-buffer "*Tip of the day*"
    (let* ((commands (loop for s being the symbols
                           when (commandp s) collect s))
           (command (nth (random (length commands)) commands)))
      (princ
       (concat "Your tip for the day is:\n"
               "========================\n\n"
               (describe-function command)
               "\n\nInvoke with:\n\n"
               (with-temp-buffer
                 (where-is command t)
                 (buffer-string)))))))

(add-hook 'after-init-hook 'totd)  
;;(add-hook 'after-init-hook 'kt-gentle-reminder)  





(provide 'pkg-misc)
